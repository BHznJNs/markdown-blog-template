{"version":3,"file":"sw.js","sources":["src/sw.js"],"sourcesContent":["const cacheName = \"MarkdownBlog\"\r\nconst necessaryResources = [\r\n    \"./dist/imgs/sun.svg\",\r\n    \"./dist/imgs/moon.svg\",\r\n    \"./dist/imgs/rss.svg\",\r\n    \"./dist/imgs/homepage.svg\",\r\n    \"./dist/imgs/broken-image.svg\",\r\n    \"./dist/imgs/favicon.png\",\r\n]\r\nconst optionalResources = [\r\n    /\\/dist\\/libs\\//,\r\n    \"./dist/imgs/fab-switch.svg\",\r\n    \"./dist/imgs/fab-catalog.svg\",\r\n    \"./dist/imgs/fab-back-to-top.svg\",\r\n    \"./dist/imgs/fab-back-to-parent.svg\",\r\n    \"./dist/imgs/fab-zoom-in.svg\",\r\n    \"./dist/imgs/fab-zoom-out.svg\",\r\n]\r\n\r\n// get the page URL without hash\r\nfunction getCleanURL() {\r\n    const href = location.href\r\n    const hashIndex = href.indexOf('#')\r\n    if (hashIndex !== -1) {\r\n        href = href.substring(0, hashIndex)\r\n    }\r\n    return href\r\n}\r\n\r\n// check if the input URL is in the necessary\r\nfunction isResourceToCache(url, type) {\r\n    const resources = type === \"necessary\"\r\n        ? necessaryResources\r\n        : optionalResources\r\n    const currentURL = getCleanURL()\r\n    for (const path of resources) {\r\n        if (typeof path === \"string\") {\r\n            const pathURL = new URL(path, currentURL)\r\n            if (pathURL.href === url) {\r\n                return true\r\n            }\r\n        } else if (path instanceof RegExp) {\r\n            if (path.test(url)) {\r\n                return true\r\n            }\r\n        } else {\r\n            console.error(\"Unexpected presetted optional resource path: \" + path)\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nself.addEventListener(\"install\", e => {\r\n    console.log(\"[Service Worker] Installing...\")\r\n    e.waitUntil((async () => {\r\n        const cache = await caches.open(cacheName)\r\n        console.log(\"[Service Worker] Caching all: app shell and content\")\r\n        // cache necessary resources\r\n        for (const resource of necessaryResources) {\r\n            try {\r\n                await cache.add(resource)\r\n            } catch(e) {\r\n                console.log(\"[Service Worker] Cache error when requesting resource \" + resource)\r\n                console.error(e)\r\n            }\r\n        }\r\n    })())\r\n})\r\n\r\nself.addEventListener(\"activate\", e => {\r\n    e.waitUntil((async () => {\r\n        // auto update cache when this file updated\r\n        const cache = await caches.open(cacheName)\r\n        const keys = await cache.keys()\r\n        keys.filter(req =>\r\n            !isResourceToCache(req.url, \"option\") &&\r\n            !isResourceToCache(req.url, \"necessary\"))\r\n        .forEach(req => cache.delete(req))\r\n    })())\r\n    console.log(\"[Service Worker] Activated\")\r\n})\r\n\r\n// intercepting fetch operations\r\nself.addEventListener(\"fetch\", e => {\r\n    function isSameOrigin(url) {\r\n        const currentURL = new URL(getCleanURL())\r\n        const targetURL  = new URL(url)\r\n        return currentURL.origin === targetURL.origin\r\n    }\r\n    async function returnCachedResource(reqURL) {\r\n        if (!isSameOrigin(reqURL)) {\r\n            return fetch(reqURL, {\r\n                mode: \"no-cors\"\r\n            })\r\n        }\r\n\r\n        const cache = await caches.open(cacheName)\r\n        const cachedResponse = await cache.match(reqURL)\r\n\r\n        if (cachedResponse) {\r\n            // return cached resources directly\r\n            return cachedResponse\r\n        }\r\n\r\n        let fetchResponse\r\n        try {\r\n            fetchResponse = await fetch(reqURL, { mode: \"no-cors\" })\r\n        } catch(err) {\r\n            return new Response(\"Network error happened: \" + err, {\r\n                status: 408,\r\n                headers: { \"Content-Type\": \"text/plain\" },\r\n            })\r\n        }\r\n        if (isResourceToCache(reqURL, \"option\")) {\r\n            // cache optional resources\r\n            cache.put(reqURL, fetchResponse.clone())\r\n        }\r\n        return fetchResponse\r\n    }\r\n    const reqURL = e.request.url\r\n    e.respondWith(returnCachedResource(reqURL))\r\n})\r\n"],"names":["cacheName","necessaryResources","optionalResources","getCleanURL","href","location","hashIndex","indexOf","substring","isResourceToCache","url","type","resources","currentURL","path","URL","RegExp","test","console","error","self","addEventListener","e","log","waitUntil","cache","caches","open","resource","add","keys","filter","req","forEach","delete","reqURL","request","respondWith","async","targetURL","origin","isSameOrigin","fetch","mode","cachedResponse","match","fetchResponse","err","Response","status","headers","put","clone","returnCachedResource"],"mappings":"AAAA,MAAMA,EAAY,eACZC,EAAqB,CACvB,sBACA,uBACA,sBACA,2BACA,+BACA,2BAEEC,EAAoB,CACtB,iBACA,6BACA,8BACA,kCACA,qCACA,8BACA,gCAIJ,SAASC,IACL,MAAMC,EAAOC,SAASD,KAChBE,EAAYF,EAAKG,QAAQ,KAI/B,OAHmB,IAAfD,IACAF,EAAOA,EAAKI,UAAU,EAAGF,IAEtBF,CACX,CAGA,SAASK,EAAkBC,EAAKC,GAC5B,MAAMC,EAAqB,cAATD,EACZV,EACAC,EACAW,EAAaV,IACnB,IAAK,MAAMW,KAAQF,EACf,GAAoB,iBAATE,EAAmB,CAE1B,GADgB,IAAIC,IAAID,EAAMD,GAClBT,OAASM,EACjB,OAAO,CAEvB,MAAe,GAAII,aAAgBE,QACvB,GAAIF,EAAKG,KAAKP,GACV,OAAO,OAGXQ,QAAQC,MAAM,gDAAkDL,GAGxE,OAAO,CACX,CAEAM,KAAKC,iBAAiB,WAAWC,IAC7BJ,QAAQK,IAAI,kCACZD,EAAEE,UAAU,WACR,MAAMC,QAAcC,OAAOC,KAAK3B,GAChCkB,QAAQK,IAAI,uDAEZ,IAAK,MAAMK,KAAY3B,EACnB,UACUwB,EAAMI,IAAID,EACnB,CAAC,MAAMN,GACJJ,QAAQK,IAAI,yDAA2DK,GACvEV,QAAQC,MAAMG,EACjB,CAER,EAZW,GAYP,IAGTF,KAAKC,iBAAiB,YAAYC,IAC9BA,EAAEE,UAAU,WAER,MAAMC,QAAcC,OAAOC,KAAK3B,UACbyB,EAAMK,QACpBC,QAAOC,IACPvB,EAAkBuB,EAAItB,IAAK,YAC3BD,EAAkBuB,EAAItB,IAAK,eAC/BuB,SAAQD,GAAOP,EAAMS,OAAOF,IAChC,EARW,IASZd,QAAQK,IAAI,6BAA6B,IAI7CH,KAAKC,iBAAiB,SAASC,IAoC3B,MAAMa,EAASb,EAAEc,QAAQ1B,IACzBY,EAAEe,YA/BFC,eAAoCH,GAChC,IANJ,SAAsBzB,GAClB,MAAMG,EAAa,IAAIE,IAAIZ,KACrBoC,EAAa,IAAIxB,IAAIL,GAC3B,OAAOG,EAAW2B,SAAWD,EAAUC,MAC1C,CAEQC,CAAaN,GACd,OAAOO,MAAMP,EAAQ,CACjBQ,KAAM,YAId,MAAMlB,QAAcC,OAAOC,KAAK3B,GAC1B4C,QAAuBnB,EAAMoB,MAAMV,GAEzC,GAAIS,EAEA,OAAOA,EAGX,IAAIE,EACJ,IACIA,QAAsBJ,MAAMP,EAAQ,CAAEQ,KAAM,WAC/C,CAAC,MAAMI,GACJ,OAAO,IAAIC,SAAS,2BAA6BD,EAAK,CAClDE,OAAQ,IACRC,QAAS,CAAE,eAAgB,eAElC,CAKD,OAJIzC,EAAkB0B,EAAQ,WAE1BV,EAAM0B,IAAIhB,EAAQW,EAAcM,SAE7BN,CACV,CAEaO,CAAqBlB,GAAQ"}