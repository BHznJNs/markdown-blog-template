{"version":3,"file":"sw.js","sources":["src/sw.js"],"sourcesContent":["const cacheName = \"MarkdownBlog-v0.1.0\"\r\nconst necessaryResources = [\r\n    \"./dist/imgs/sun.svg\",\r\n    \"./dist/imgs/moon.svg\",\r\n    \"./dist/imgs/homepage.svg\",\r\n    \"./dist/imgs/broken-image.svg\",\r\n    \"./dist/imgs/favicon.png\",\r\n]\r\nconst optionalResources = [\r\n    /\\/dist\\/libs\\//,\r\n    \"./dist/imgs/search.svg\",\r\n    \"./dist/imgs/rss.svg\",\r\n    \"./dist/imgs/fab-switch.svg\",\r\n    \"./dist/imgs/fab-catalog.svg\",\r\n    \"./dist/imgs/fab-back-to-top.svg\",\r\n    \"./dist/imgs/fab-back-to-parent.svg\",\r\n    \"./dist/imgs/fab-zoom-in.svg\",\r\n    \"./dist/imgs/fab-zoom-out.svg\",\r\n]\r\n\r\n// get the page URL without hash\r\nfunction getCleanURL() {\r\n    const href = location.href\r\n    const hashIndex = href.indexOf('#')\r\n    if (hashIndex !== -1) {\r\n        return href.substring(0, hashIndex)\r\n    } else {\r\n        return href\r\n    }\r\n}\r\n\r\n// check if the input URL is in the necessary\r\nfunction isResourceToCache(url, type) {\r\n    const resources = type === \"necessary\"\r\n        ? necessaryResources\r\n        : optionalResources\r\n    const currentURL = getCleanURL()\r\n    for (const path of resources) {\r\n        if (typeof path === \"string\") {\r\n            const pathURL = new URL(path, currentURL)\r\n            if (pathURL.href === url) {\r\n                return true\r\n            }\r\n        } else if (path instanceof RegExp) {\r\n            if (path.test(url)) {\r\n                return true\r\n            }\r\n        } else {\r\n            console.error(\"Unexpected presetted optional resource path: \" + path)\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nself.addEventListener(\"install\", e => {\r\n    console.log(\"[Service Worker] Installing...\")\r\n    e.waitUntil((async () => {\r\n        const cache = await caches.open(cacheName)\r\n        console.log(\"[Service Worker] Caching all: app shell and content\")\r\n        // cache necessary resources\r\n        for (const resource of necessaryResources) {\r\n            try {\r\n                await cache.add(resource)\r\n            } catch(e) {\r\n                console.log(\"[Service Worker] Cache error when requesting resource \" + resource)\r\n                console.error(e)\r\n            }\r\n        }\r\n    })())\r\n})\r\n\r\nself.addEventListener(\"activate\", e => {\r\n    e.waitUntil((async () => {\r\n        // delete resources for outdated version\r\n        const keys = await caches.keys()\r\n        await Promise.all(\r\n            keys\r\n                .filter(key => key !== cacheName)\r\n                .map(key => caches.delete(key))\r\n        )\r\n    })())\r\n    console.log(\"[Service Worker] Activated\")\r\n})\r\n\r\n// intercepting fetch operations\r\nself.addEventListener(\"fetch\", e => {\r\n    function isSameOrigin(url) {\r\n        const currentURL = new URL(getCleanURL())\r\n        const targetURL  = new URL(url)\r\n        return currentURL.origin === targetURL.origin\r\n    }\r\n    async function returnCachedResource(reqURL) {\r\n        const cache = await caches.open(cacheName)\r\n        const cachedResponse = await cache.match(reqURL)\r\n        if (cachedResponse) {\r\n            // return cached resources directly\r\n            return cachedResponse\r\n        }\r\n\r\n        let fetchResponse\r\n        try {\r\n            fetchResponse = await fetch(reqURL, { mode: \"no-cors\" })\r\n        } catch(err) {\r\n            return new Response(\"Network error happened: \" + err, {\r\n                status: 408,\r\n                headers: { \"Content-Type\": \"text/plain\" },\r\n            })\r\n        }\r\n        if (isResourceToCache(reqURL, \"option\")) {\r\n            // cache optional resources\r\n            cache.put(reqURL, fetchResponse.clone())\r\n        }\r\n        return fetchResponse\r\n    }\r\n    const reqURL = e.request.url\r\n    if (!isSameOrigin(reqURL)) {\r\n        return;\r\n    }\r\n    e.respondWith(returnCachedResource(reqURL))\r\n})\r\n"],"names":["cacheName","necessaryResources","optionalResources","getCleanURL","href","location","hashIndex","indexOf","substring","self","addEventListener","e","console","log","waitUntil","cache","caches","open","resource","add","error","keys","Promise","all","filter","key","map","delete","reqURL","request","url","currentURL","URL","targetURL","origin","isSameOrigin","respondWith","async","cachedResponse","match","fetchResponse","fetch","mode","err","Response","status","headers","type","resources","path","RegExp","test","isResourceToCache","put","clone","returnCachedResource"],"mappings":"AAAA,MAAMA,EAAY,sBACZC,EAAqB,CACvB,sBACA,uBACA,2BACA,+BACA,2BAEEC,EAAoB,CACtB,iBACA,yBACA,sBACA,6BACA,8BACA,kCACA,qCACA,8BACA,gCAIJ,SAASC,IACL,MAAMC,EAAOC,SAASD,KAChBE,EAAYF,EAAKG,QAAQ,KAC/B,OAAmB,IAAfD,EACOF,EAAKI,UAAU,EAAGF,GAElBF,CAEf,CAyBAK,KAAKC,iBAAiB,WAAWC,IAC7BC,QAAQC,IAAI,kCACZF,EAAEG,UAAU,WACR,MAAMC,QAAcC,OAAOC,KAAKjB,GAChCY,QAAQC,IAAI,uDAEZ,IAAK,MAAMK,KAAYjB,EACnB,UACUc,EAAMI,IAAID,EACnB,CAAC,MAAMP,GACJC,QAAQC,IAAI,yDAA2DK,GACvEN,QAAQQ,MAAMT,EACjB,CAER,EAZW,GAYP,IAGTF,KAAKC,iBAAiB,YAAYC,IAC9BA,EAAEG,UAAU,WAER,MAAMO,QAAaL,OAAOK,aACpBC,QAAQC,IACVF,EACKG,QAAOC,GAAOA,IAAQzB,IACtB0B,KAAID,GAAOT,OAAOW,OAAOF,KAErC,EARW,IASZb,QAAQC,IAAI,6BAA6B,IAI7CJ,KAAKC,iBAAiB,SAASC,IA6B3B,MAAMiB,EAASjB,EAAEkB,QAAQC,KA5BzB,SAAsBA,GAClB,MAAMC,EAAa,IAAIC,IAAI7B,KACrB8B,EAAa,IAAID,IAAIF,GAC3B,OAAOC,EAAWG,SAAWD,EAAUC,MAC1C,EAyBIC,CAAaP,IAGlBjB,EAAEyB,YA3BFC,eAAoCT,GAChC,MAAMb,QAAcC,OAAOC,KAAKjB,GAC1BsC,QAAuBvB,EAAMwB,MAAMX,GACzC,GAAIU,EAEA,OAAOA,EAGX,IAAIE,EACJ,IACIA,QAAsBC,MAAMb,EAAQ,CAAEc,KAAM,WAC/C,CAAC,MAAMC,GACJ,OAAO,IAAIC,SAAS,2BAA6BD,EAAK,CAClDE,OAAQ,IACRC,QAAS,CAAE,eAAgB,eAElC,CAKD,OAhFR,SAA2BhB,EAAKiB,GAC5B,MAAMC,EAAqB,cAATD,EACZ9C,EACAC,EACA6B,EAAa5B,IACnB,IAAK,MAAM8C,KAAQD,EACf,GAAoB,iBAATC,GAEP,GADgB,IAAIjB,IAAIiB,EAAMlB,GAClB3B,OAAS0B,EACjB,OAAO,OAER,GAAImB,aAAgBC,QACvB,GAAID,EAAKE,KAAKrB,GACV,OAAO,OAGXlB,QAAQQ,MAAM,gDAAkD6B,GAGxE,OAAO,CACX,CAwDYG,CAAkBxB,EAAQ,WAE1Bb,EAAMsC,IAAIzB,EAAQY,EAAcc,SAE7Bd,CACV,CAKae,CAAqB3B,GAAQ"}